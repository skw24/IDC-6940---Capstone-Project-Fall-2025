{
  "hash": "29c15a7d4d3c443a926ad829a1cba083",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Project Setup - Week 5\"\ndescription: \"For Week 5 setting up Quarto Website and Getting Started with R project\"\nauthor:\n  - name: Renan Monteiro Barbosa\n    url: https://github.com/renanmb\n    affiliation: Master of Data Science Program @ The University of West Florida (UWF)\n    # affiliation-url: https://ucsb-meds.github.io/\n# date: 10-24-2022\ncategories: [getting started, week 5, renan]\n# citation:\n#   url: https://samanthacsik.github.io/posts/2022-10-24-my-blog-post/\nimage: images/spongebob-imagination.jpg\ndraft: false\nbibliography: references.bib\nlink-citations: true\n---\n\nThis week we are getting started on how to setup the Quarto and R project for proper Collaboration.\n\nThis post will demonstrate how to install RENV, initate your Renv environment and then load the dataset and do some demonstrations manipulating the dataset.\n\nWe will be using the dataset: [Stroke Prediction Dataset](https://www.kaggle.com/datasets/fedesoriano/stroke-prediction-dataset)\n\n\n## What is Renv\n\n[renv](https://rstudio.github.io/renv/) is a pakcage manager that helps you create reproducible environments for your R projects.\n\nInstall the latest version of renv from CRAN with:\n\n```{{r}}\ninstall.packages(\"renv\")\n```\n\n### Renv Workflow\n\nUse [renv::init()](https://rstudio.github.io/renv/reference/init.html) to initialize renv in a new or existing project. This will set up a project library, containing all the packages you’re currently using. The packages (and all the metadata needed to reinstall them) are recorded into a lockfile, renv.lock, and a .Rprofile ensures that the library is used every time you open that project.\n\nAs you continue to work on your project, you will install and upgrade packages, either using [install.packages()](https://rdrr.io/r/utils/install.packages.html) and [update.packages()](https://rdrr.io/r/utils/update.packages.html) or [renv::install()](https://rstudio.github.io/renv/reference/install.html) and [renv::update()](https://rstudio.github.io/renv/reference/update.html). After you’ve confirmed your code works as expected, use [renv::snapshot()](https://rstudio.github.io/renv/reference/snapshot.html) to record the packages and their sources in the lockfile.\n\nLater, if you need to share your code with someone else or run your code on new machine, your collaborator (or you) can call [renv::restore()](https://rstudio.github.io/renv/reference/restore.html) to reinstall the specific package versions recorded in the lockfile.\n\n### Learning more\n\nIf this is your first time using renv, we strongly recommend starting with the [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html) vignette: this will help you understand the most important verbs and nouns of renv.\n\nIf you have a question about renv, please first check the [FAQ](https://rstudio.github.io/renv/articles/faq.html) to see whether your question has already been addressed. If it hasn’t, please feel free to ask on the [Posit Forum](https://forum.posit.co/?_gl=1*z3n5na*_ga*MTE0Mjc0MDc2OS4xNzU2NzYwNjQy*_ga_2C0WZ1JHG0*czE3NTk5NTExMjMkbzckZzEkdDE3NTk5NTExNDMkajQwJGwwJGgw).\n\nIf you believe you’ve found a bug in renv, please file a bug (and, if possible, a [reproducible example](https://reprex.tidyverse.org/)) at https://github.com/rstudio/renv/issues.\n\n## Import Dataset Example\n\nGet the packages setup:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\nlibrary(fitdistrplus)\nlibrary(gsheet)\nlibrary(boot)\nlibrary(readr)\n```\n:::\n\n\n### Import the dataset\n\nThis should find the path to the datasets folder programatically.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nfind_git_root <- function(start = getwd()) {\n  path <- normalizePath(start, winslash = \"/\", mustWork = TRUE)\n  while (path != dirname(path)) {\n    if (dir.exists(file.path(path, \".git\"))) return(path)\n    path <- dirname(path)\n  }\n  stop(\"No .git directory found — are you inside a Git repository?\")\n}\n\nrepo_root <- find_git_root()\ndatasets_path <- file.path(repo_root, \"datasets\")\n# repo_root\n# datasets_path\n```\n:::\n\n\nNow we define the dataset we want to load, healthcare-dataset-stroke-data.csv will be inside kaggle-healthcare-dataset-stroke-data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nkaggle_dataset_path <- file.path(datasets_path, \"kaggle-healthcare-dataset-stroke-data/healthcare-dataset-stroke-data.csv\")\n\nkaggle_data1 = read_csv(kaggle_dataset_path, show_col_types = FALSE)\n```\n:::\n\n\nExploring the dataset, BMI is not stored as numeric value also the NA fields are stored as text \"N/A\".\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nhead(kaggle_data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 12\n     id gender   age hypertension heart_disease ever_married work_type    \n  <dbl> <chr>  <dbl>        <dbl>         <dbl> <chr>        <chr>        \n1  9046 Male      67            0             1 Yes          Private      \n2 51676 Female    61            0             0 Yes          Self-employed\n3 31112 Male      80            0             1 Yes          Private      \n4 60182 Female    49            0             0 Yes          Private      \n5  1665 Female    79            1             0 Yes          Self-employed\n6 56669 Male      81            0             0 Yes          Private      \n# ℹ 5 more variables: Residence_type <chr>, avg_glucose_level <dbl>, bmi <chr>,\n#   smoking_status <chr>, stroke <dbl>\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# Count total NAs per column\ncolSums(is.na(kaggle_data1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               id            gender               age      hypertension \n                0                 0                 0                 0 \n    heart_disease      ever_married         work_type    Residence_type \n                0                 0                 0                 0 \navg_glucose_level               bmi    smoking_status            stroke \n                0                 0                 0                 0 \n```\n\n\n:::\n:::\n\n\nApparently seems there is no NA values. Let's continue.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# overall\nsummary(kaggle_data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       id           gender               age         hypertension    \n Min.   :   67   Length:5110        Min.   : 0.08   Min.   :0.00000  \n 1st Qu.:17741   Class :character   1st Qu.:25.00   1st Qu.:0.00000  \n Median :36932   Mode  :character   Median :45.00   Median :0.00000  \n Mean   :36518                      Mean   :43.23   Mean   :0.09746  \n 3rd Qu.:54682                      3rd Qu.:61.00   3rd Qu.:0.00000  \n Max.   :72940                      Max.   :82.00   Max.   :1.00000  \n heart_disease     ever_married        work_type         Residence_type    \n Min.   :0.00000   Length:5110        Length:5110        Length:5110       \n 1st Qu.:0.00000   Class :character   Class :character   Class :character  \n Median :0.00000   Mode  :character   Mode  :character   Mode  :character  \n Mean   :0.05401                                                           \n 3rd Qu.:0.00000                                                           \n Max.   :1.00000                                                           \n avg_glucose_level     bmi            smoking_status         stroke       \n Min.   : 55.12    Length:5110        Length:5110        Min.   :0.00000  \n 1st Qu.: 77.25    Class :character   Class :character   1st Qu.:0.00000  \n Median : 91.89    Mode  :character   Mode  :character   Median :0.00000  \n Mean   :106.15                                          Mean   :0.04873  \n 3rd Qu.:114.09                                          3rd Qu.:0.00000  \n Max.   :271.74                                          Max.   :1.00000  \n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nglimpse(kaggle_data1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,110\nColumns: 12\n$ id                <dbl> 9046, 51676, 31112, 60182, 1665, 56669, 53882, 10434…\n$ gender            <chr> \"Male\", \"Female\", \"Male\", \"Female\", \"Female\", \"Male\"…\n$ age               <dbl> 67, 61, 80, 49, 79, 81, 74, 69, 59, 78, 81, 61, 54, …\n$ hypertension      <dbl> 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1…\n$ heart_disease     <dbl> 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0…\n$ ever_married      <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No…\n$ work_type         <chr> \"Private\", \"Self-employed\", \"Private\", \"Private\", \"S…\n$ Residence_type    <chr> \"Urban\", \"Rural\", \"Rural\", \"Urban\", \"Rural\", \"Urban\"…\n$ avg_glucose_level <dbl> 228.69, 202.21, 105.92, 171.23, 174.12, 186.21, 70.0…\n$ bmi               <chr> \"36.6\", \"N/A\", \"32.5\", \"34.4\", \"24\", \"29\", \"27.4\", \"…\n$ smoking_status    <chr> \"formerly smoked\", \"never smoked\", \"never smoked\", \"…\n$ stroke            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n```\n\n\n:::\n:::\n\n\nSummary give some interesting insights but glimpse shows that there are NA values, even worse, the BMI values are stored and strings and should be numeric.\n\nNow lets explore the Categorical and Numeric variables.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# check categorical variables\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Check one by one, lets see what we got\n# kaggle_data1 %>% count(gender)\n# kaggle_data1 %>% count(hypertension)\n# kaggle_data1 %>% count(heart_disease)\n# kaggle_data1 %>% count(ever_married)\n# kaggle_data1 %>% count(work_type)\n# kaggle_data1 %>% count(Residence_type )\n# kaggle_data1 %>% count(smoking_status)\n# kaggle_data1 %>% count(stroke)\n\n# Now make it a little cleaner\ncat_vars <- c(\"gender\", \"hypertension\", \"heart_disease\", \"ever_married\",\n              \"work_type\", \"Residence_type\", \"smoking_status\", \"stroke\")\n\nkaggle_data1[, cat_vars] %>%\n  # Convert all to character to avoid type conflicts\n  mutate_all(as.character) %>%\n  pivot_longer(cols = names(.), names_to = \"variable\", values_to = \"value\") %>%\n  count(variable, value) %>%\n  arrange(variable, desc(n)) %>% print(n = 22)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 × 3\n   variable       value               n\n   <chr>          <chr>           <int>\n 1 Residence_type Urban            2596\n 2 Residence_type Rural            2514\n 3 ever_married   Yes              3353\n 4 ever_married   No               1757\n 5 gender         Female           2994\n 6 gender         Male             2115\n 7 gender         Other               1\n 8 heart_disease  0                4834\n 9 heart_disease  1                 276\n10 hypertension   0                4612\n11 hypertension   1                 498\n12 smoking_status never smoked     1892\n13 smoking_status Unknown          1544\n14 smoking_status formerly smoked   885\n15 smoking_status smokes            789\n16 stroke         0                4861\n17 stroke         1                 249\n18 work_type      Private          2925\n19 work_type      Self-employed     819\n20 work_type      children          687\n21 work_type      Govt_job          657\n22 work_type      Never_worked       22\n```\n\n\n:::\n:::\n\n\nIts pretty interesting, now lets see what happens with the numeric variables\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Check Numeric Variables - id, age, avg_glucose_level, bmi\nkaggle_data1 %>%\n  select_if(is.numeric) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       id             age         hypertension     heart_disease    \n Min.   :   67   Min.   : 0.08   Min.   :0.00000   Min.   :0.00000  \n 1st Qu.:17741   1st Qu.:25.00   1st Qu.:0.00000   1st Qu.:0.00000  \n Median :36932   Median :45.00   Median :0.00000   Median :0.00000  \n Mean   :36518   Mean   :43.23   Mean   :0.09746   Mean   :0.05401  \n 3rd Qu.:54682   3rd Qu.:61.00   3rd Qu.:0.00000   3rd Qu.:0.00000  \n Max.   :72940   Max.   :82.00   Max.   :1.00000   Max.   :1.00000  \n avg_glucose_level     stroke       \n Min.   : 55.12    Min.   :0.00000  \n 1st Qu.: 77.25    1st Qu.:0.00000  \n Median : 91.89    Median :0.00000  \n Mean   :106.15    Mean   :0.04873  \n 3rd Qu.:114.09    3rd Qu.:0.00000  \n Max.   :271.74    Max.   :1.00000  \n```\n\n\n:::\n:::\n\n\nWe need to deal with the BMI data which has missing values and its not stored as numerical.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# unique(kaggle_data1$bmi)\nkaggle_data2 <- kaggle_data1 %>%\n  mutate(bmi = na_if(bmi, \"N/A\")) %>%   # Convert \"N/A\" string to NA\n  mutate(bmi = as.numeric(bmi))         # Convert from character to numeric\n\n# kaggle_data2 <- kaggle_data1 %>% mutate(bmi = as.numeric(na_if(bmi, \"N/A\")))\n\n# Check if it worked\nstr(kaggle_data2$bmi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:5110] 36.6 NA 32.5 34.4 24 29 27.4 22.8 NA 24.2 ...\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nsum(is.na(kaggle_data2$bmi))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 201\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# Check Numeric Variables - id, age, avg_glucose_level, bmi\nkaggle_data2 %>%\n  select_if(is.numeric) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       id             age         hypertension     heart_disease    \n Min.   :   67   Min.   : 0.08   Min.   :0.00000   Min.   :0.00000  \n 1st Qu.:17741   1st Qu.:25.00   1st Qu.:0.00000   1st Qu.:0.00000  \n Median :36932   Median :45.00   Median :0.00000   Median :0.00000  \n Mean   :36518   Mean   :43.23   Mean   :0.09746   Mean   :0.05401  \n 3rd Qu.:54682   3rd Qu.:61.00   3rd Qu.:0.00000   3rd Qu.:0.00000  \n Max.   :72940   Max.   :82.00   Max.   :1.00000   Max.   :1.00000  \n                                                                    \n avg_glucose_level      bmi            stroke       \n Min.   : 55.12    Min.   :10.30   Min.   :0.00000  \n 1st Qu.: 77.25    1st Qu.:23.50   1st Qu.:0.00000  \n Median : 91.89    Median :28.10   Median :0.00000  \n Mean   :106.15    Mean   :28.89   Mean   :0.04873  \n 3rd Qu.:114.09    3rd Qu.:33.10   3rd Qu.:0.00000  \n Max.   :271.74    Max.   :97.60   Max.   :1.00000  \n                   NA's   :201                      \n```\n\n\n:::\n:::\n\n\n\n## Conclusion\n\nThe dataset is imbalanced and has many issues there are several research work that explore solutions:\n\n- [Machine learning for stroke prediction using imbalanced data](https://www.nature.com/articles/s41598-025-01855-w) @melnykova2025machine\n- [Predictive modelling and identification of key risk factors for stroke using machine learning](https://pmc.ncbi.nlm.nih.gov/articles/PMC11106277/) @hassan2024predictive\n\n\nThe research [Predictive modelling and identification of key risk factors for stroke using machine learning](https://pmc.ncbi.nlm.nih.gov/articles/PMC11106277/) has made several contributions adding a lot of insights:\n\n- Exploring various data imputation techniques and addressing data imbalance issues in order to enhance the accuracy and robustness of stroke prediction models.\n\n- Identifying crucial features for stroke prediction and uncovering previously unknown risk factors, giving a comprehensive understanding of stroke risk assessment.\n\n- Creating an augmented dataset incorporating important key risk factor features using the imputed datasets, enhancing the effectiveness of stroke prediction models.\n\n- Assessing the effectiveness of advanced machine learning models across different datasets and creating a robust Dense Stacking Ensemble model for stroke prediction.\n\n- The key contribution is showcasing the enhanced predictive capabilities of the model in accurately identifying and testing strokes, surpassing the performance of prior studies that utilized the same dataset.\n\n\n\n\n::: {.callout-note}\nLarge datasets might need Github LFS which is not setup, therefore must store then externally. \n:::\n\n## Additional Thoughts\n\nQuarto websites when combined with python and R is a great way to \n\nQuarto websites, when combined with Python and R, offer a powerful way to create dynamic, data-driven content that turns out into amazing presentations rich in visual content. \n\nHowever there are limitations, Github Actions runner is not powerful and before submitting the project for rendering must take that into consideration. On future work will evaluate solutions to the computational budget limitations in Github Action Runner.\n\n[How to efficiently break up a computationally heavy article into separate notebooks?#8410](https://github.com/quarto-dev/quarto-cli/discussions/8410)\n\nSome have mentioned that the project can be split into sections.\n\n### References\n\n::: {#refs}\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}